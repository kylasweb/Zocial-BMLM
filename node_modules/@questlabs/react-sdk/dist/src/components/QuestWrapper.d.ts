import { ReactNode } from 'react';
type FeatureFlag = {
    isEnabled: boolean;
    isActive: boolean;
    flagName: string;
    description: string;
};
type FeatureFlags = {
    [key: string]: FeatureFlag;
};
type ThemeConfig = {
    primaryColor?: string;
    secondaryColor?: string;
    borderColor?: string;
    buttonColor?: string;
    backgroundColor?: string;
    fontFamily?: string;
};
type Props = {
    children: ReactNode;
    apiKey: string;
    apiSecret?: string;
    entityId: string;
    featureFlags?: FeatureFlags;
    apiType?: "STAGING" | "PRODUCTION";
    themeConfig?: ThemeConfig;
};
export type User = {
    userId?: string;
    token?: string;
    userCredentials?: object;
    refreshToken?: string;
    name?: string;
    newUser?: string;
};
export declare const Context: import('react').Context<{
    apiKey: string;
    apiSecret?: string;
    entityId: string;
    user: User;
    setUser: (user: User) => void;
    featureFlags: Record<string, {
        isEnabled: boolean;
    }>;
    apiType: "PRODUCTION" | "STAGING";
    themeConfig: ThemeConfig;
}>;
export declare const QuestProvider: (props: Props) => import("react/jsx-runtime").JSX.Element;
declare const _default: {
    Context: import('react').Context<{
        apiKey: string;
        apiSecret?: string;
        entityId: string;
        user: User;
        setUser: (user: User) => void;
        featureFlags: Record<string, {
            isEnabled: boolean;
        }>;
        apiType: "PRODUCTION" | "STAGING";
        themeConfig: ThemeConfig;
    }>;
    QuestProvider: (props: Props) => import("react/jsx-runtime").JSX.Element;
};
export default _default;
