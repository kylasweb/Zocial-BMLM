interface DefaultImages {
    [key: string]: string;
    success: string;
    warning: string;
    error: string;
    info: string;
}
interface ToastOptions {
    autoClose?: number;
    position?: string;
    onClose?: () => void;
    canClose?: boolean;
    defaultImages?: DefaultImages;
    className?: string;
    text?: string;
    pauseOnHover?: boolean;
    background?: string;
    image?: string;
    borderColor?: string;
    template?: number;
    description?: string;
}
declare class Toast {
    #private;
    onClose?: () => void;
    constructor(options: ToastOptions);
    static success(options: ToastOptions): Toast;
    static error(options: ToastOptions): Toast;
    static info(options: ToastOptions): Toast;
    static warning(options: ToastOptions): Toast;
    set autoClose(value: boolean | undefined);
    set position(value: string | undefined);
    set image(src: string | undefined);
    set text(value: string);
    set description(value: string);
    set canClose(value: boolean | undefined);
    set showProgress(value: boolean | undefined);
    set pauseOnHover(value: boolean | undefined);
    set pauseOnFocusLoss(value: boolean | undefined);
    update(options: ToastOptions & {
        className?: string;
    }): void;
    set background(value: string | undefined);
    set borderColor(value: string | undefined);
    remove(): void;
    private createContainer;
}
export default Toast;
