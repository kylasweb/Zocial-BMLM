import { default as React } from 'react';
interface QuestThemeData {
    accentColor: string;
    theme: string;
    borderRadius: string;
    buttonColor: string;
    images: string[];
}
interface Headers {
    heading: string;
    subHeading: string;
}
type BrandTheme = {
    accentColor?: string;
    background?: string;
    borderRadius?: string;
    primaryButton?: string;
    secondaryButton?: string;
    contentColor?: string;
    fontFamily?: string;
    logo?: string;
    primaryColor?: string;
    secondaryColor?: string;
    tertiaryColor?: string;
    titleColor?: string;
};
interface FeedbackProps {
    heading?: string;
    subHeading?: string;
    btnColor?: string;
    bgColor?: string;
    btnTextColor?: string;
    textColor?: string;
    font?: string;
    Headers?: Headers[] | Headers | undefined;
    supportUrl?: string;
    onSubmit?: () => void;
    delay?: number;
    isInline?: boolean;
    crossLogoForInput?: boolean;
    onCancel?: Function;
    itemsPerPage?: number;
    iconColor?: string;
    offlineFormData: Array<FormDataItem>;
    BrandTheme?: BrandTheme;
    QuestThemeData?: QuestThemeData;
    ratingType?: string;
    styleConfig?: {
        Form?: React.CSSProperties;
        Heading?: React.CSSProperties;
        Description?: React.CSSProperties;
        Input?: React.CSSProperties;
        Label?: React.CSSProperties;
        TextArea?: React.CSSProperties;
        PrimaryButton?: React.CSSProperties;
        SecondaryButton?: React.CSSProperties;
        Modal?: React.CSSProperties;
        Footer?: {
            FooterStyle?: React.CSSProperties;
            FooterTextStyle?: React.CSSProperties;
            FooterIcon?: React.CSSProperties;
            FooterText?: string;
            FooterLink?: string;
        };
        EmailError?: {
            text?: string;
            errorStyle?: React.CSSProperties;
        };
        Rating?: {
            RatingContainer?: React.CSSProperties;
            SingleRating?: React.CSSProperties;
            RatingText?: React.CSSProperties;
            Hover?: React.CSSProperties;
        };
        MultiChoice?: {
            style?: React.CSSProperties;
            selectedStyle?: React.CSSProperties;
        };
    };
    showFooter?: boolean;
    questionSections?: number[][];
}
interface FormDataItem {
    type?: string;
    question?: string;
    options?: string[];
    criteriaId?: string;
    required?: boolean;
    placeholder?: string;
}
declare const SurveyOffline: ({ heading, subHeading, btnColor, btnTextColor, textColor, font, bgColor, supportUrl, onSubmit, delay, isInline, crossLogoForInput, onCancel, itemsPerPage, iconColor, ratingType, offlineFormData, styleConfig, BrandTheme, QuestThemeData, showFooter, questionSections, Headers }: FeedbackProps) => import("react/jsx-runtime").JSX.Element;
export default SurveyOffline;
