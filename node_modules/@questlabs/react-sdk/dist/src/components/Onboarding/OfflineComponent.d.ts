import { CSSProperties } from 'react';
type HeadingScreen = {
    heading: string;
    subHeading: string;
};
type BrandTheme = {
    accentColor?: string;
    background?: string;
    borderRadius?: string;
    primaryButton?: string;
    secondaryButton?: string;
    contentColor?: string;
    fontFamily?: string;
    logo?: string;
    primaryColor?: string;
    secondaryColor?: string;
    tertiaryColor?: string;
    titleColor?: string;
};
interface QuestThemeData {
    accentColor: string;
    theme: string;
    borderRadius: string;
    buttonColor: string;
    images: string[];
}
interface QuestLoginProps {
    userId?: string;
    token?: string;
    questId?: string;
    uniqueUserId?: string;
    uniqueEmailId?: string;
    design?: Array<Array<number>> | undefined;
    Headers?: HeadingScreen | HeadingScreen[] | any;
    singleChoose?: "modal1" | "modal2" | "modal3";
    multiChoice?: "modal1" | "modal2";
    getAnswers: Function | undefined;
    answer: any;
    setAnswer: React.Dispatch<React.SetStateAction<any>>;
    customComponents?: React.JSX.Element;
    customComponentPositions?: number;
    progress?: string[];
    loadingTracker?: boolean;
    setLoading?: Function;
    nextBtnText?: string;
    progressBarMultiLine?: boolean;
    controlBtnType?: "Arrow" | "Buttons";
    template?: "multi-question" | "single-question" | "single-page";
    BrandTheme?: BrandTheme;
    QuestThemeData?: QuestThemeData;
    showFooter?: boolean;
    styleConfig?: {
        Form?: CSSProperties;
        Topbar?: CSSProperties;
        Heading?: CSSProperties;
        Description?: CSSProperties;
        Input?: CSSProperties;
        EmailError?: {
            text?: string;
            errorStyle?: CSSProperties;
        };
        Label?: CSSProperties;
        TextArea?: CSSProperties;
        PrimaryButton?: CSSProperties;
        SecondaryButton?: CSSProperties;
        Footer?: {
            FooterStyle?: CSSProperties;
            FooterTextStyle?: CSSProperties;
            FooterIcon?: CSSProperties;
            FooterText?: string;
            FooterLink?: string;
        };
        SingleChoice?: {
            style?: CSSProperties;
            selectedStyle?: CSSProperties;
            hoverBackground?: string;
        };
        MultiChoice?: {
            style?: CSSProperties;
            selectedStyle?: CSSProperties;
            isLabel?: boolean;
        };
        ProgressBar?: {
            completeTabColor?: string;
            currentTabColor?: string;
            pendingTabColor?: string;
        };
    };
    offlineFormData: offlineFormData[] | [];
}
interface offlineFormData {
    type: string;
    question: string;
    options?: Array<string>;
    criteriaId: string;
    required: boolean;
    placeholder?: string;
    linkTitle?: string;
    manualInput: string | boolean;
}
declare function OnBoardingOffline(props: QuestLoginProps): false | import("react/jsx-runtime").JSX.Element;
export default OnBoardingOffline;
