import { CSSProperties } from 'react';
interface offlineData {
    id: number;
    title: string;
    url: string;
    criteriaId?: string;
    description?: string;
    btn1?: string;
    btn2?: string;
    completed?: boolean;
    btn1Link: string;
    longDescription?: string;
    imageUrl?: string;
}
type BrandTheme = {
    accentColor?: string;
    background?: string;
    borderRadius?: string;
    buttonColor?: string;
    contentColor?: string;
    fontFamily?: string;
    logo?: string;
    primaryColor?: string;
    secondaryColor?: string;
    tertiaryColor?: string;
    titleColor?: string;
};
interface QuestThemeData {
    accentColor: string;
    theme: string;
    borderRadius: string;
    buttonColor: string;
    images: string[];
}
type Headers = {
    heading: string;
    subHeading: string;
};
type offlineGetStartedProps = {
    cardBackground?: string;
    cardHeadingColor?: string;
    onCompleteAllStatus?: () => void;
    iconUrls?: Array<string>;
    uniqueUserId?: string;
    uniqueEmailId?: string;
    cardBorderColor?: string;
    Headers?: Headers[] | Headers | undefined;
    headingText?: string;
    descriptionText?: string;
    autoHide?: boolean;
    isImageOpen?: boolean;
    showProgressBar?: boolean;
    completedButtonColor?: string;
    completedButtonBackgroundColor?: string;
    arrowColor?: string;
    showLoadingIndicator?: boolean;
    allowMultiClick?: boolean;
    showFooter?: boolean;
    ButtonType?: "Arrow" | "Buttons";
    onLinkTrigger?: (url: string, index: number) => void;
    BrandTheme?: BrandTheme;
    QuestThemeData?: QuestThemeData;
    template?: 1 | 2;
    styleConfig?: {
        Heading?: CSSProperties;
        Description?: CSSProperties;
        PrimaryButton?: CSSProperties;
        SecondaryButton?: CSSProperties;
        Form?: CSSProperties;
        Footer?: {
            FooterStyle?: CSSProperties;
            FooterText?: CSSProperties;
            FooterIcon?: CSSProperties;
            FooterLink?: string;
        };
        Card?: CSSProperties;
        Topbar?: CSSProperties;
        ProgressBar?: {
            barColor?: string;
            ProgressText?: CSSProperties;
        };
        Icon?: CSSProperties;
        Arrow?: {
            Background?: string;
            IconColor?: string;
            CompletedBackground?: string;
            CompletedIconColor?: string;
        };
        CardContainer?: CSSProperties;
        IsImageOpen?: {
            ContainerDiv?: CSSProperties;
            ImageContainer?: {
                ImageContainerProperties?: CSSProperties;
                Image?: CSSProperties;
            };
        };
    };
    offlineData: offlineData[];
};
declare function GetStartedOffline({ iconUrls, headingText, descriptionText, autoHide, Headers, showProgressBar, template, arrowColor, showLoadingIndicator, allowMultiClick, showFooter, styleConfig, offlineData, ButtonType, BrandTheme, QuestThemeData, onLinkTrigger, isImageOpen, }: offlineGetStartedProps): import("react/jsx-runtime").JSX.Element;
export default GetStartedOffline;
