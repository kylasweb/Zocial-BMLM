import { ICommonResponse } from "./common.types";
import { Entity } from "./entity.types";
export interface DynamicNft {
    userId: string;
    entityId: string;
    type: string;
    membershipTier: number;
    runningXP: number;
    totalXP: number;
    nftTokenId?: string;
    name: string;
    title: string;
    description?: string;
    image?: string;
    animation_url?: string;
    metadataIPFS?: string;
    attributes?: DynamicNftAttribute[];
    createdAt: Date;
}
export interface DynamicNftAttribute {
    display_type?: String;
    trait_type?: String;
    value?: any;
    image?: String;
    item_type?: String;
}
export interface DynamicNftTheme {
    themeId: string;
    entityId: string;
    membershipTier: number;
    tokenId?: string;
    price?: string;
    title: string;
    backgroundImage?: string;
    squareLogoImage?: string;
    horizontalLogoImage?: string;
    backgroundColor?: string;
    accentColor1?: string;
    accentColor2?: string;
    metadataIPFS?: string;
    attributes: DynamicNftThemeAttribute[];
    createdAt: Date;
}
export interface UserXpHistory {
    userId: string;
    entityId: string;
    xp: number;
    title?: string;
    createdAt: Date;
}
export interface DynamicNftThemeAttribute {
    display_type?: string;
    trait_type?: String;
    value?: any;
}
export interface IMintDynamicNFT {
    type: string;
    forUserId: string;
    entityId?: string;
}
export interface IMintDynamicNFTResponse extends ICommonResponse {
    data: DynamicNft;
}
export interface IAddRunningXP {
    xp: string;
    forUserId?: string;
    entityId?: string;
    title?: string;
    isAccumulateXP?: boolean;
    metadata?: object;
}
export interface IAddRunningXPResponse extends ICommonResponse {
}
export interface IGetMyDynamicNFTsResponse extends ICommonResponse {
    data: DynamicNft[];
}
export interface IGetMyDynamicNFTDetailsForEntity {
    entityId?: string;
}
export interface IGetMyDynamicNFTDetailsForEntityResponse extends ICommonResponse {
    data: DynamicNft;
    entity_data: Entity;
}
export interface IGetXpForUser {
    userId?: string;
    entityId?: string;
}
export interface IGetXpForUserResponse extends ICommonResponse {
    data: number;
}
export interface IGetXpForUsers {
    userIds: string[];
    entityId?: string;
}
export interface IGetXpForUsersResponse extends ICommonResponse {
    data: {
        userId: string;
        runningXP: string;
    }[];
}
export interface IGetXpForEntity {
    entityId?: string;
}
export interface IGetXpForEntityResponse extends ICommonResponse {
    data: number;
}
export interface IGetXpForEntities {
    entityIds: string[];
}
export interface IGetXpForEntitiesResponse extends ICommonResponse {
    data?: {
        entityId: string;
        runningXP: string;
    }[];
}
export interface IRecalculateUsersDynamicNFT extends IGetMyDynamicNFTDetailsForEntity {
    userId?: string;
}
export interface IRecalculateUsersDynamicNFTResponse extends ICommonResponse {
    data: boolean;
}
export interface IGetAllThemesForEntity extends IGetMyDynamicNFTDetailsForEntity {
}
export interface IGetAllThemesForEntityResponse extends ICommonResponse {
    data: DynamicNftTheme[];
}
export interface IAddNewThemeForEntity {
    membershipTier: number;
    title: string;
    price: string;
    entityId?: string;
    backgroundImageIPFS?: string;
    horizontalLogoImageIPFS?: string;
    squareLogoImageIPFS?: string;
    backgroundColor?: string;
    accentColor1?: string;
    accentColor2?: string;
    metadataIPFS?: string;
}
export interface IAddNewThemeForEntityResponse extends ICommonResponse {
    themeId: string;
}
export interface IGetThemeDetailsForEntity extends IGetMyDynamicNFTDetailsForEntity {
    themeId: string;
}
export interface IGetThemeDetailsForEntityResponse extends ICommonResponse {
    data: DynamicNftTheme;
}
export interface IUpdateThemeForEntity {
    themeId: string;
    entityId?: string;
    membershipTier?: number;
    title?: string;
    price?: string;
    backgroundImageIPFS?: string;
    horizontalLogoImageIPFS?: string;
    squareLogoImageIPFS?: string;
    backgroundColor?: string;
    accentColor1?: string;
    accentColor2?: string;
    metadataIPFS?: string;
}
export interface IUpdateThemeForEntityResponse extends ICommonResponse {
}
export interface IDeleteThemeForEntity extends IGetThemeDetailsForEntity {
}
export interface IDeleteThemeForEntityResponse extends ICommonResponse {
}
export interface ISetDefaultThemeForEntity extends IDeleteThemeForEntity {
}
export interface ISetDefaultThemeForEntityResponse extends ICommonResponse {
}
export interface IGetUserXpLeaderboardRank {
    forUserId?: string;
    threshold?: number;
    entityId?: string;
}
export interface IGetUserXpLeaderboardRankResponse extends ICommonResponse {
    data: {
        position: number;
        threshold: string;
        isUserInThreshold: boolean;
    };
}
export interface IGetUserXpHistory {
    entityId?: string;
    forUserId?: string;
    page?: number;
    limit?: number;
}
export interface IGetUserXpHistoryResponse extends ICommonResponse {
    data: UserXpHistory[];
    page: number;
    totalCount: number;
    totalPages: number;
}
export interface IGetUserXpLeaderboard {
    entityId?: string;
    page?: number;
    limit?: number;
}
export interface IIGetUserXpLeaderboardResponse extends ICommonResponse {
    data: {
        userId: string;
        imageUrl?: string;
        name?: string;
        runningXP: number;
    }[];
    page: number;
    totalCount: number;
    totalPages: number;
}
