import { ICommonResponse } from "./common.types";
import { Entity } from "./entity.types";
export type BadgeVisibility = "LIMITED" | "OPEN";
export type BadgeType = "DISCORD" | "WHALE" | "LOYALTY" | "NONE";
export type BadgeClaimStatus = "CLAIMED" | "UNCLAIMED" | "NOT_WHITELISTED";
export interface Skill {
    skillId: string;
    score: number;
}
export interface Badge {
    badgeId: string;
    entityId: string;
    badgeContractTokenId?: string;
    name: string;
    imageIPFS?: string;
    description?: string;
    xp?: number;
    skills?: Skill[];
    isEnabled?: boolean;
    visibility?: BadgeVisibility;
    type?: BadgeType;
    typeData?: any;
    proofType?: string;
    endsAt?: number;
    remainingCount?: number;
    createdBy: string;
    createdAt: Date;
}
export interface IGetAllBadgesResponse extends ICommonResponse {
    data: [
        {
            data: Badge;
            inDyNFT: boolean;
            claimed: boolean;
            claimStatus: BadgeClaimStatus;
        }
    ];
}
export interface IGetAllBadgesForEntity {
    entityId?: string;
}
export interface IAddBadgesForEntity {
    name: string;
    imageIPFS: string;
    description: string;
    entityId?: string;
    skills?: string;
    userIds?: string;
    endsAt?: string;
    xp?: string;
    airdropEnabled?: string;
    typeData?: string;
    type?: string;
    totalCount?: string;
    visibility?: string;
    proofType?: string;
}
export interface IAddBadgesForEntityResponse extends ICommonResponse {
    badgeId: string;
}
export interface IGetBadgeInfoForEntity {
    prefixBadgeIpfs?: boolean;
    entityId?: string;
    badgeId: string;
}
export interface IGetBadgeInfoForEntityResponse extends ICommonResponse {
    data: {
        badge_data: Badge;
        skills_data: [
            {
                skillId: string;
                score: number;
                name: string;
                description: string;
                isEnabled: boolean;
            }
        ];
        entity_data: Entity;
        claimedUsers: string[];
        unclaimedUsers: string[];
        isOwner: boolean;
        stats: {
            claimedCount: number;
            unClaimedCount: number;
        };
        claimStatus: BadgeClaimStatus;
    };
}
export interface IUpdateBadgesForEntity {
    badgeId: string;
    entityId?: string;
    name?: string;
    imageIPFS?: string;
    description?: string;
    skills?: string;
    endsAt?: string;
    xp?: string;
    typeData?: string;
    type?: string;
    userIds?: string[];
}
export interface IUpdateBadgesForEntityResponse extends ICommonResponse {
}
export interface IClaimBadgeForEntity {
    badgeId: string;
    addToDynamicNFT: boolean;
    entityId?: string;
}
export interface IClaimBadgeForEntityResponse extends ICommonResponse {
    loginAgain?: boolean;
    nftMinted: boolean;
    calculatedDynamicNFT: boolean;
}
export interface IAddUsersToBadge {
    badgeId: string;
    userIds: string[];
    entityId?: string;
}
export interface IAddUsersToBadgeResponse extends ICommonResponse {
}
export interface IGetNumberOfBadgesEarned {
    entityId?: string;
    forUserId?: string;
}
export interface IGetNumberOfBadgesEarnedResponse extends ICommonResponse {
    data: number;
}
export interface IGetUserEarnedBadgesForEntity {
    entityId?: string;
    forUserId?: string;
    page?: number;
    limit?: number;
}
export interface IGetUserEarnedBadgesForEntityRepsonse extends ICommonResponse {
    data: Badge[];
    page: number;
    totalCount: number;
    totalPages: number;
}
