import { ICommonResponse } from "./common.types";
export interface Entity {
    id: string;
    entityURLAlias?: string;
    entityRecordIds?: string[];
    contracts?: string[];
    badgeContractAddress?: string;
    dyNFTContractAddress?: string;
    themeContractAddress?: string;
    name?: string;
    openseaSlug?: string;
    description?: string;
    twitter?: string;
    discord?: string;
    slack?: string;
    telegram?: string;
    instagram?: string;
    website?: string;
    medium?: string;
    imageUrl?: string;
    bannerUrl?: string;
    isEnabled?: boolean;
    isPrivate?: boolean;
    chainSource?: ChainSource;
    defaultDyNftThemeId?: string;
    discordQuestWebhookURL?: string;
    modifiedAt?: Date;
    createdAt?: Date;
    plan?: "FREE" | "PRO_PLAN_MONTHLY" | "PRO_PLAN_YEARLY" | "PREMIUM_PLAN_MONTHLY" | "PREMIUM_PLAN_YEARLY" | "ENTERPRISE_PLAN";
    theme?: Record<string, any>;
    parentEntityId?: string;
    decreaseCreditsAt?: DecreaseCreditsAt;
    decreaseCreditsFrom?: DecreaseCreditsFrom;
    category?: Category;
}
export type ChainSource = "OFF_CHAIN" | "POLYGON" | "SOLANA";
export type DecreaseCreditsAt = "CAMPAIGN_CREATION" | "CAMPAIGN_ACTION_VERIFICATION" | "NEW_USER_REGISTRATION" | "REWARDS_COLLECTION" | "NONE";
export type DecreaseCreditsFrom = "USER" | "SUB_ENTITY" | "NONE";
export type Category = "ARTS" | "ENTERTAINMENT" | "GAMING" | "MEDIA" | "HEALTH" | "FINANCE" | "LIFESTYLE" | "EDUCATION" | "ENVIRONMENT" | "SPIRITUALITY" | "OTHERS";
export interface EntityTag {
    tagId: string;
    entityId: string;
    tagName?: string;
    description?: string;
    tagUsers?: string[];
    isPrivate?: boolean;
    isEnabled?: boolean;
    createdAt: Date;
}
export interface EntityOwnerMapping {
    userId: string;
    entityId: string;
    role: EntityRole;
    isActive: boolean;
    createdAt: Date;
}
export interface EntityTokenMapping {
    entityId: string;
    recordType: EntityTokenRecordType;
    authClientId?: string;
    authClientSecret?: string;
    authorizationToken?: string;
    apiKey?: string;
    apiSecret?: string;
    apiHost?: string;
    createdAt: Date;
    updatedAt: Date;
}
export type EntityTokenRecordType = "TWITTER" | "DISCORD" | "INSTAGRAM" | "TELEGRAM" | "STRIPE" | "OPENAI" | "GOOGLE" | "RAPID_API";
export type EntityRole = "OWNER" | "ADMIN" | "EDITOR" | "READER";
export interface ICreateNewEntity {
    name: string;
    chainSource?: ChainSource;
    contracts?: string[];
    openseaSlug?: string;
    description?: string;
    isPrivate?: string;
    decreaseCreditsAt?: DecreaseCreditsAt;
    decreaseCreditsFrom?: DecreaseCreditsFrom;
    website?: string;
    imageUrl?: string;
    bannerUrl?: string;
    entityURLAlias?: string;
    parentEntityId?: string;
    category?: Category;
    forUserId?: string;
}
export interface ICreateNewEntityResponse extends ICommonResponse {
    entityId: string;
}
export interface IAddNewCustomEntityId {
    customPlatformName: string;
    customPlatformId: string;
    entityId?: string;
    name?: string;
    username?: string;
    link?: string;
    accessToken?: string;
    refreshToken?: string;
    expiresIn?: string;
}
export interface IAddNewCustomEntityIdResponse extends ICommonResponse {
}
export interface IGetAllEntities {
    page?: string;
    limit?: string;
    category?: string;
}
export interface IGetAllEntitiesResponse extends ICommonResponse {
    data: Entity[];
}
export interface IGetEntityInfo {
    entityId?: string;
}
export interface IGetEntityInfoResponse extends ICommonResponse {
    data: Entity;
}
export interface IGetEntityIdForAlias {
    alias: string;
}
export interface IGetEntityIdForAliasResponse extends ICommonResponse {
    data: string;
}
export interface IGetEntityIdForCustomEntityId {
    customEntityId: string;
    platform: string;
    recordType: string;
}
export interface IGetEntityIdForCustomEntityIdResponse extends IGetEntityIdForAliasResponse {
}
export interface IUpdateEntity {
    entityId?: string;
    name?: string;
    description?: string;
    isPrivate?: string;
    decreaseCreditsAt?: DecreaseCreditsAt;
    decreaseCreditsFrom?: DecreaseCreditsFrom;
    website?: string;
    imageUrl?: string;
    bannerUrl?: string;
    entityURLAlias?: string;
}
export interface IUpdateEntityResponse extends ICommonResponse {
}
export interface IUpdateEntityTheme {
    theme: Record<string, any>;
    entityId?: string;
}
export interface IUpdateEntityThemeResponse extends ICommonResponse {
    message: string;
}
export interface IGetEntityTheme {
    entityId?: string;
}
export interface IGetEntityThemeResponse extends ICommonResponse {
    theme: Record<string, any>;
}
export interface IUpdateEntityPlan {
    product: Record<string, any>;
    entityId?: string;
}
export interface IUpdateEntityPlanResponse extends ICommonResponse {
}
export interface IGetUsersForEntityForUser {
    entityId?: string;
}
export interface IGetUsersForEntityForUserResponse extends ICommonResponse {
    users: [
        {
            tagDetails: EntityTag[];
            _id: string;
            userId: string;
            imageUrl?: string;
            name?: string;
            emails?: string[];
            ethAddresses?: string[];
            createdAt: Date;
            xp: number;
            level: number;
        }
    ];
}
export interface IManuallyAddUsersToEntity {
    userIds: string[];
    entityId?: string;
}
export interface IManuallyAddUsersToEntityResponse extends ICommonResponse {
}
export interface IGetAllAdmins {
    lessDetails?: boolean;
    entityId?: string;
}
export interface IGetAllAdminsResponse extends ICommonResponse {
    message?: string;
    data: [
        {
            name: string;
            imageUrl?: string;
            userId: string;
            ethAddresses?: string[];
            emails: string[];
            isActive: boolean;
            createdAt: Date;
            role: EntityRole;
        }
    ];
}
export interface IRemoveAdmin {
    userId: string;
    entityId?: string;
}
export interface IRemoveAdminResponse extends ICommonResponse {
    message?: string;
}
export interface IAddOrUpdateSocialTokens {
    recordType: EntityTokenRecordType;
    entityId?: string;
    authClientId?: string;
    authClientSecret?: string;
    apiKey?: string;
    apiSecret?: string;
    authorizationToken?: string;
    apiHost?: string;
}
export interface IAddOrUpdateSocialTokensResponse extends ICommonResponse {
}
export interface IGetSocialTokens {
    recordType: EntityTokenRecordType;
    entityId?: string;
}
export interface IGetSocialTokensResponse extends ICommonResponse {
    data: {
        entityId: string;
        recordType: EntityTokenRecordType;
        authClientId?: string;
        apiKey?: string;
        apiHost?: string;
        authorizationToken?: string;
        createdAt: Date;
        updatedAt: Date;
    };
}
export interface IApproveEntityCreation {
    entityId: string;
    baseName?: string;
    baseSymbol?: string;
}
export interface IApproveEntityCreationResponse extends ICommonResponse {
}
export interface IGetAllPendingEntitiesResponse extends ICommonResponse {
    data: Entity[];
}
export interface IAddAdminToEntity {
    email: string;
    name: string;
    entityId?: string;
    role?: EntityRole;
}
export interface IAddAdminToEntityResponse extends ICommonResponse {
    message: string;
}
export interface IGetOrGenerateNewAPIKey {
    entityId?: string;
}
export interface IGetOrGenerateNewAPIKeyResponse extends ICommonResponse {
    data: {
        key: string;
        secret: string;
        apiCount: number;
        apiThreshold: number;
        createdAt: Date;
        entityId: string;
    };
}
