import { ICommonResponse } from "./common.types";
export interface User {
    userId: string;
    userRecordMappingId: string;
    signatureToken?: string;
    name?: string;
    username?: string;
    imageUrl?: string;
    bannerUrl?: string;
    subtitle?: string;
    location?: string;
    interests?: string[];
    expertise?: string[];
    goals?: string[];
    eth_nfts?: NFT[];
    polygon_nfts?: NFT[];
    sol_nfts?: NFT[];
    about?: string;
    role?: string;
    sector?: string;
    currentWork?: string;
    funFacts?: string[];
    tokenGeneratedAt?: Date;
    lastHardRefreshAt?: Date;
    modifiedAt?: Date;
    createdAt?: Date;
}
export interface IUserRecordMapping {
    userId: string;
    entityId: string;
    ethAddresses?: string[];
    emails?: string[];
    phones?: string[];
    externalUserId?: string;
    userRecordIDs: {
        recordType: string;
        recordId: string;
    }[];
}
export interface NFT {
    nftId: string;
    nftName?: string;
    nftImageUrl?: string;
    nftContractId?: string;
    modifiedAt?: Date;
    createdAt?: Date;
}
export interface ICreateNewCustomUser {
    customUserId: string;
    customPlatform: string;
    entityId?: string;
}
export interface ICreateNewCustomUserResponse extends ICommonResponse {
    userId: string;
    newUser: boolean;
}
export interface IGetUserDetailsForUserId {
    forUserId?: string;
}
export interface IGetUserDetailsForUserIdResponse extends ICommonResponse {
    data: User;
    isAdmin: boolean;
}
export interface IGetUserDetailsForEmail {
    email: string;
}
export interface IGetUserDetailsForEmailResponse extends IGetUserDetailsForUserIdResponse {
}
export interface IGetUserDetailsForWalletAddress {
    walletAddress: string;
}
export interface IGetUserDetailsForWalletAddressResponse extends IGetUserDetailsForUserIdResponse {
}
export interface UserRecords {
    ethAddresses?: string[];
    emails?: string[];
    twitter?: string;
    discord?: string;
    instagram?: string;
    telegram?: string;
}
interface SocialRecordResponse {
    name?: string;
    username?: string;
    userId?: string;
}
export interface IGetConnectedUserSocialsResponse extends ICommonResponse {
    data: {
        ethAddresses?: string[];
        emails?: string[];
        twitter?: SocialRecordResponse;
        discord?: SocialRecordResponse;
    };
}
export interface IGetConnectedUserSocials {
    entityId?: string;
}
export interface IEntitesForUser {
    page?: number;
    limit?: number;
}
export interface EntityShort {
    id: string;
    name?: string;
    openseaSlug?: string;
    description?: string;
    twitter?: string;
    discord?: string;
    telegram?: string;
    instagram?: string;
    website?: string;
    contracts?: string[];
    ownerIDs?: string[];
    imageUrl?: string;
    bannerUrl?: string;
}
export interface EntityShorter {
    id: string;
    name?: string;
    description?: string;
    website?: string;
    imageUrl?: string;
    parentEntityId?: string;
}
export interface IEntitesForUserResponse extends ICommonResponse {
    data: EntityShort[];
}
export interface IGetAdminEntitiesForUser {
    parentEntityId?: string;
}
export interface IGetAdminEntitiesForUserResponse extends ICommonResponse {
    data: EntityShorter[];
}
export interface ISetSelectedAdminEntityId {
    entityId?: string;
}
export interface ISetSelectedAdminEntityIdResponse extends ICommonResponse {
}
export interface ISetUserInfo {
    name?: string;
    imageUrl?: string;
    bannerUrl?: string;
    location?: string;
    expertise?: string;
    goals?: string[];
    interests?: string[];
    about?: string;
    currentWork?: string;
    funFacts?: string[];
    role?: string;
    sector?: string;
}
export interface ISetUserInfoResponse extends ICommonResponse {
}
export interface ISendOtpEmail {
    email: string;
    entityId?: string;
}
export interface ISendOtpEmailResponse extends ICommonResponse {
    data: string;
}
export interface IVerifyOtpEmail {
    email: string;
    entityId?: string;
    otp: string;
    name?: string;
}
export interface IVerifyOtpEmailResponse extends ICommonResponse {
    userId: string;
    token: string;
    newUser: boolean;
}
export interface ILoginWithGoogle {
    code: string;
    redirectUri: string;
    entityId?: string;
}
export interface ILoginWithGoogleResponse extends IVerifyOtpEmailResponse {
}
export interface ILoginWithWallet {
    entityId?: string;
    walletAddress: string;
    signature: string;
    token: string;
}
export interface ILoginWithWalletResponse extends IVerifyOtpEmailResponse {
}
export interface IConnectWallet extends ILoginWithWallet {
    userId: string;
}
export interface IConnectWalletResponse extends ICommonResponse {
    walletAddress: string;
}
export interface ILoginWithExternalUserId {
    externalUserId: string;
    entityId?: string;
    walletAddress?: string;
    email?: string;
    name?: string;
    imageUrl?: string;
}
export interface IRefreshUserToken {
    refreshToken: string;
    entityId?: string;
}
export interface IRefreshUserTokenResponse {
    success: boolean;
    error?: string;
    data: {
        token: string;
    };
}
export {};
