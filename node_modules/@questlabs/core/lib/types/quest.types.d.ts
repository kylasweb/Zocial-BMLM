import { EligibilityCriteria } from "../types/eligibilityCriteria.types";
import { ICommonResponse } from "./common.types";
import { ICreateQuestEligibilityCriteria, IUpdateQuestEligibilityCriteria } from "./eligibilityCriteria.types";
import { GetQuestDetailReward, ICreateQuestReward, IUpdateQuestReward } from "./reward.types";
import { QuestSkill } from "./skill.types";
export type QuestCategory = "BADGE" | "XP" | "SKILLSCORE" | "GEMS" | "COLLECTIBLES" | "DISCORDROLE" | "TOKEN" | "CUSTOMREWARD";
export interface Quest {
    questId: string;
    entityId: string;
    eligibilityCriterias: string[];
    rewards: string[];
    title: string;
    description?: string;
    imageURL?: string;
    endsAt?: string;
    isDeleted: boolean;
    hasReferral: boolean;
    referralXP: number;
    visibility: string;
    status: string;
    xp: number;
    skills: QuestSkill[];
    theme: {
        type: Object;
    };
    minXPThreshold: number;
    createdAt: Date;
    categories?: QuestCategory[];
    isPrivate: boolean;
    type?: string;
    allowRepeatEntries: boolean;
    dependentQuests?: string[];
    isDependentCriterias?: boolean;
    metrics?: string[];
    autoClaimRewards?: boolean;
    incrementBasedOnCount?: boolean;
}
export interface IMetricQuestMapping {
    metricId: string;
    questId: string;
    entityId: string;
    metricType: QuestMetricType;
    threshold?: number;
    autoClaimRewards: boolean;
    repeatRewardsBasedOnMetricCount: boolean;
}
export interface IGetAllQuests {
    page?: number;
    limit?: number;
    category?: QuestCategory;
}
interface QuestStat {
    questId: string;
    entityId: string;
    date: string;
    viewCount: number;
    claimCount: number;
    createdAt: Date;
    updatedAt: Date;
}
export interface IGetAllQuestsResponse extends ICommonResponse {
    data: Quest[];
}
export interface IGetAllQuestsForEntity {
    entityId?: string;
    page?: number;
    limit?: number;
    category?: QuestCategory;
}
export interface IGetAllQuestsForEntityResponse extends IGetAllQuestsResponse {
}
export interface IGetQuestDetails {
    questId: string;
    entityId?: string;
    prefixBadgeIpfs?: boolean;
    /**
     * Used for incrementing the quest view count.
     */
    detailsPage?: boolean;
}
export interface IGetQuestDetailsResponse extends ICommonResponse {
    data: Quest;
    eligibilityData: {
        data: EligibilityCriteria;
        completed: boolean;
        userAnswer?: string;
        isLocked: boolean;
        unfinishedCriteriaIds?: string[];
        lockTitle?: string;
    }[];
    allCriteriasCompleted: boolean;
    referralCode?: string;
    claimStatus: boolean;
    totalClaimed?: number;
    rewards: GetQuestDetailReward[];
    totalCriteriasCompleted: number;
    completedCriteriasPercentage: number;
    session: string;
}
export interface IGetQuestSummary {
    entityId?: string;
    questId: string;
}
export interface IGetQuestSummaryResponse extends ICommonResponse {
    summary: {
        quest: Quest;
        answers: {
            question: string;
            answers: {
                userAnswer: string;
                userId: string;
                name?: string;
                imageUrl?: string;
            }[];
        }[];
        questStats: QuestStat[];
    };
}
export interface IQuestTheme {
    accentColor: string;
    backgroundColor: string;
    fontFamily: string;
    layout: "side-by-side" | "one-coumn";
}
export interface ICreateQuest {
    title: string;
    eligibilityCriterias: ICreateQuestEligibilityCriteria[];
    rewards: ICreateQuestReward[];
    entityId?: string;
    description?: string;
    imageURL?: string;
    endsAt?: Date;
    hasReferral?: boolean;
    referralXP?: number;
    theme?: IQuestTheme;
    isPrivate?: boolean;
    isDependentCriterias?: boolean;
    dependentQuestIDs?: string[];
    isMetricQuest?: boolean;
}
export interface ICreateQuestResponse extends ICommonResponse {
    id: string;
}
export interface IUpdateQuest {
    questId: string;
    entityId?: string;
    eligibilityCriterias?: IUpdateQuestEligibilityCriteria[];
    rewards?: IUpdateQuestReward[];
    title?: string;
    description?: string;
    imageURL?: string;
    endsAt?: Date;
    theme?: IQuestTheme;
    eligibilityCriteriaIdsToDelete?: string[];
    rewardIdsToDelete?: string[];
    hasReferral?: boolean;
    referralXP?: number;
    isPrivate?: boolean;
    isMetricQuest?: boolean;
}
export interface IUpdateQuestResponse extends ICommonResponse {
}
export interface IDeleteQuest {
    questId: string;
    entityId?: string;
}
export interface IDeleteQuestResponse extends ICommonResponse {
    message?: string;
}
export interface IVerifyQuestCriteriaForAUser {
    questId: string;
    entityId?: string;
    criteriaId: string;
    answer?: string[];
}
export interface IVerifyQuestCriteriaForAUserResponse extends ICommonResponse {
    loginAgain?: boolean;
    status?: number;
}
export interface IVerifyMultipleQuestCriteriaForAUser {
    questId: string;
    entityId?: string;
    referralCode?: string;
    session?: string;
    criterias: {
        criteriaId: string;
        answer?: string[];
    }[];
}
export interface IVerifyMultipleQuestCriteriaForAUserResponse extends IVerifyQuestCriteriaForAUserResponse {
    failedCriterias?: string[];
}
export interface IClaimQuestRewards {
    questId: string;
    entityId?: string;
    referralCode?: number;
    userIds?: string[];
}
export interface IClaimQuestRewardsResponse extends ICommonResponse {
}
export interface IGetOrSetNewReferralCodeForQuestAndUser {
    questId: string;
    entityId?: string;
}
export interface IGetOrSetNewReferralCodeForQuestAndUserResponse extends ICommonResponse {
    referralCode: string;
}
export interface IGetReferralLeaderboard {
    questId: string;
    entityId?: string;
}
export interface IGetReferralLeaderboardResponse extends ICommonResponse {
    data: {
        userId: string;
        count: number;
        name: string;
    }[];
}
export interface IGetQuestSubmissions {
    questId: string;
    entityId?: string;
    parentEntityId: string;
}
export interface IGetQuestSubmissionsResponse extends ICommonResponse {
    data: {
        email: string;
        usersReferred: number;
        referredBy: string;
        submittedAt: Date;
        userId: string;
        referralCode: string;
    }[];
    totalDocuments: number;
    totalPages: number;
}
export interface IClaimMultipleQuestRewards {
    questIds: string[];
    entityId?: string;
    referralCode?: string;
    addToDynamicNFT?: boolean;
}
export interface IClaimMultipleQuestRewardsResponse extends ICommonResponse {
    failedClaims?: string[];
}
export interface IGetMultipleQuestDetails {
    entityId?: string;
    detailsPage?: boolean;
    page?: number;
    limit?: number;
}
export interface IGetMultipleQuestDetailsResponse extends ICommonResponse {
    quests: IGetQuestDetails[];
}
export type QuestMetricType = "threshold" | "increment";
export interface ICreateMetricQuest {
    title: string;
    metric: {
        metricId: string;
        metricType: QuestMetricType;
        threshold?: number;
    };
    rewards: ICreateQuestReward[];
    autoClaimRewards: boolean;
    repeatRewardsBasedOnMetricCount: boolean;
    entityId?: string;
    description?: string;
    endsAt?: Date;
    metadata?: Record<string, any>;
    priority?: number;
}
export interface ICreateMetricQuestResponse extends ICommonResponse {
    questId: string;
}
export interface IGetMetricQuestDetails {
    questId: string;
    entityId?: string;
}
export interface IGetMetricQuestDetailsResponse extends ICommonResponse {
    data: {
        quest: Quest;
        rewards: GetQuestDetailReward[];
        progressPercent: number;
        claimStatus: boolean;
        metricDetails: IMetricQuestMapping;
    };
}
export {};
