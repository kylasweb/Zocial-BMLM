import { ICommonResponse } from "./common.types";
export type IRecurringTimePeriod = "MONTHLY" | "YEARLY" | "ONETIME";
export interface EntityCreditTier {
    entityId: string;
    creditsTierId: string;
    creditsTierName: string;
    price: number;
    creditsAmount: number;
    extraCreditsAmount: number;
    recurringTimePeriod: IRecurringTimePeriod;
}
export type IEntityUserCreditsHistoryType = "BOUGHT" | "GIFTED" | "EARNED";
export interface EntityUserCreditsMappingHistory {
    creditsAmount: number;
    createdAt: Date;
    type: IEntityUserCreditsHistoryType;
    reason?: string;
}
export interface EntityUserCreditsMapping {
    entityId: string;
    userId: string;
    creditsAmount: number;
    totalCreditsBought?: number;
    currentCreditsTierId?: string;
    history: EntityUserCreditsMappingHistory[];
}
export interface EntityCreditsAmountMappingHistory {
    byUserId: string;
    creditsAmount: number;
    createdAt: Date;
    type: IEntityUserCreditsHistoryType;
    reason?: string;
}
export interface EntityCreditsAmountMapping {
    entityId: string;
    creditsAmount: number;
    totalCreditsBought?: number;
    currentCreditsTierId: string;
    history: EntityCreditsAmountMappingHistory[];
}
export interface IAddCreditTierForEntity {
    creditsTierId: string;
    creditsTierName: string;
    price: number;
    creditsAmount: number;
    extraCreditsAmount: number;
    recurringTimePeriod: IRecurringTimePeriod;
    entityId?: string;
}
export interface IAddCreditTierForEntityResponse extends ICommonResponse {
    data: EntityCreditTier;
}
export interface IUpdateCreditTierForEntity {
    creditsTierId: string;
    entityId?: string;
    creditsTierName?: string;
    price?: number;
    creditsAmount?: number;
    extraCreditsAmount?: number;
    recurringTimePeriod?: IRecurringTimePeriod;
}
export interface IUpdateCreditTierForEntityResponse extends IAddCreditTierForEntityResponse {
}
export interface IGetCreditTiersForEntity {
    entityId?: string;
}
export interface IGetCreditTiersForEntityResponse extends ICommonResponse {
    data: EntityCreditTier[];
}
export interface IGetCreditInfoForUser {
    entityId?: string;
    forUserId?: string;
}
export interface IGetCreditInfoForUserResponse extends ICommonResponse {
    data: EntityUserCreditsMapping;
}
export interface IGetCreditInfoForEntity {
    entityId?: string;
}
export interface IGetCreditInfoForEntityResponse extends ICommonResponse {
    data: EntityCreditsAmountMapping;
}
export interface IBuyCreditsForUser {
    creditsTierId: string;
    intentId: string;
    entityId?: string;
    forUserId?: string;
}
export interface IBuyCreditsForUserResponse extends ICommonResponse {
}
export interface IBuyCreditsForEntity {
    creditsTierId: string;
    intentId: string;
    entityId?: string;
}
export interface IBuyCreditsForEntityResponse extends ICommonResponse {
}
export interface IDecrementCreditsForUser {
    creditsAmount: number;
    forUserId?: string;
    entityId?: string;
}
export interface IDecrementCreditsForUserResponse extends ICommonResponse {
}
export interface IDecrementCreditsForEntity {
    creditsAmount: number;
    entityId?: string;
}
export interface IDecrementCreditsForEntityResponse extends ICommonResponse {
}
export interface PaymentIntentCardData {
    email: string;
    name: string;
    address: {
        country: string;
        postal_code: number;
        city: string;
        state: string;
        line1: string;
        line2: string;
    };
}
export interface PaymentIntentIntentData {
    paymentMethodId: string;
    amount: number;
    currency: string;
}
export interface ICreatePaymentIntentForEntity {
    entityId?: string;
    cardData: PaymentIntentCardData;
    intentData: PaymentIntentIntentData;
}
export interface IICreatePaymentIntentForEntityResponse extends ICommonResponse {
    data: {
        clientSecret: string;
        intentId: string;
    };
}
export interface IApprovePaymentForEntity {
    entityId?: string;
    intentId: string;
}
export interface IApprovePaymentForEntityResponse extends ICommonResponse {
}
