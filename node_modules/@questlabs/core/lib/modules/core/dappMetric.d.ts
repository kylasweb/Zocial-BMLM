import QuestSdk from "../..";
import { IGetRequestOptions, IPostRequestOptions } from "../../types/common.types";
import { ICreateDappMetrics, ICreateDappMetricsResponse, IDeleteDappMetrics, IDeleteDappMetricsResponse, IEditDappMetrics, IEditDappMetricsResponse, IGetAllDappMetrics, IGetAllDappMetricsForUser, IGetAllDappMetricsForUserResponse, IGetAllDappMetricsResponse, IGetDappMetricForUser, IGetDappMetricForUserResponse, IIncrementDappMetricForUser, IIncrementDappMetricForUserResponse, IIncrementMultipleMetricsForUser, IIncrementMultipleMetricsForUserResponse } from "../../types/dappMetric.types";
export declare class DappMetric {
    questSdk: QuestSdk;
    constructor(questSdk: QuestSdk);
    createDappMetrics({ metric, thresholdTime, name, description, type, entityId, platform, eventName }: ICreateDappMetrics, options?: IPostRequestOptions): Promise<ICreateDappMetricsResponse>;
    deleteDappMetrics({ entityId, metric }: IDeleteDappMetrics, options?: IPostRequestOptions): Promise<IDeleteDappMetricsResponse>;
    editDappMetrics({ entityId, metric, name, description, type, thresholdTime, platform, eventName }: IEditDappMetrics, options?: IPostRequestOptions): Promise<IEditDappMetricsResponse>;
    getAllDappMetrics({ entityId, type }?: IGetAllDappMetrics, options?: IGetRequestOptions): Promise<IGetAllDappMetricsResponse>;
    getDappMetricForUser({ entityId, metric, forUserId }: IGetDappMetricForUser, options?: IGetRequestOptions): Promise<IGetDappMetricForUserResponse>;
    incrementDappMetricForUser({ entityId, metric, count, forUserId }: IIncrementDappMetricForUser, options?: IPostRequestOptions): Promise<IIncrementDappMetricForUserResponse>;
    getAllDappMetricsForUser({ entityId, forUserId }?: IGetAllDappMetricsForUser, options?: IGetRequestOptions): Promise<IGetAllDappMetricsForUserResponse>;
    incrementMultipleMetricsForUser({ entityId, metrics, forUserId }: IIncrementMultipleMetricsForUser, options?: IPostRequestOptions): Promise<IIncrementMultipleMetricsForUserResponse>;
}
