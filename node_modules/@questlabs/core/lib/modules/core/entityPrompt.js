"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityPrompt = void 0;
const constants_1 = require("../../utils/constants");
const helperFunctions_1 = require("../../utils/helperFunctions");
class EntityPrompt {
    constructor(questSdk) {
        this.questSdk = questSdk;
    }
    addEntityPrompt({ actualPrompt, entityId, usecase }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { userId, token } = this.questSdk.getUser();
                (0, helperFunctions_1.validateParams)({ actualPrompt, usecase, token, userId });
                const url = `/entities/${entityId}/prompt`;
                const body = Object.assign({ actualPrompt, usecase }, options === null || options === void 0 ? void 0 : options._body);
                return this.questSdk.makeRequest({
                    url,
                    method: constants_1.HTTP_METHOD.POST,
                    headers: options === null || options === void 0 ? void 0 : options._headers,
                    queryParams: options === null || options === void 0 ? void 0 : options._queryParams,
                    body,
                });
            }
            catch (error) {
                this.questSdk.captureSentryException(error);
                throw error;
            }
        });
    }
    generatePromptResponseByUsecase({ message, entityId, usecase }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { userId, token } = this.questSdk.getUser();
                (0, helperFunctions_1.validateParams)({ message, usecase, userId, token });
                const url = `/entities/${entityId}/prompt/request`;
                const body = Object.assign({ message, usecase }, options === null || options === void 0 ? void 0 : options._body);
                return this.questSdk.makeRequest({
                    url,
                    method: constants_1.HTTP_METHOD.POST,
                    headers: options === null || options === void 0 ? void 0 : options._headers,
                    queryParams: options === null || options === void 0 ? void 0 : options._queryParams,
                    body,
                });
            }
            catch (error) {
                this.questSdk.captureSentryException(error);
                throw error;
            }
        });
    }
    updateEntityPrompt({ actualPrompt, entityId, usecase }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { userId, token } = this.questSdk.getUser();
                (0, helperFunctions_1.validateParams)({ actualPrompt, usecase, userId, token });
                const url = `/entities/${entityId}/prompt`;
                const body = Object.assign({ actualPrompt, usecase }, options === null || options === void 0 ? void 0 : options._body);
                return this.questSdk.makeRequest({
                    url,
                    method: constants_1.HTTP_METHOD.PATCH,
                    headers: options === null || options === void 0 ? void 0 : options._headers,
                    queryParams: options === null || options === void 0 ? void 0 : options._queryParams,
                    body,
                });
            }
            catch (error) {
                this.questSdk.captureSentryException(error);
                throw error;
            }
        });
    }
}
exports.EntityPrompt = EntityPrompt;
