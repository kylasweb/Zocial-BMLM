import QuestSdk from "../..";
import { IGetRequestOptions, IPostRequestOptions } from "../../types/common.types";
import { IAddCreditTierForEntity, IAddCreditTierForEntityResponse, IApprovePaymentForEntity, IApprovePaymentForEntityResponse, IBuyCreditsForEntity, IBuyCreditsForEntityResponse, IBuyCreditsForUser, IBuyCreditsForUserResponse, ICreatePaymentIntentForEntity, IDecrementCreditsForEntity, IDecrementCreditsForEntityResponse, IDecrementCreditsForUser, IDecrementCreditsForUserResponse, IGetCreditInfoForEntity, IGetCreditInfoForEntityResponse, IGetCreditInfoForUser, IGetCreditInfoForUserResponse, IGetCreditTiersForEntity, IGetCreditTiersForEntityResponse, IICreatePaymentIntentForEntityResponse, IUpdateCreditTierForEntity, IUpdateCreditTierForEntityResponse } from "../../types/entityCreditTier.types";
export declare class EntiyCreditTier {
    questSdk: QuestSdk;
    constructor(questSdk: QuestSdk);
    addCreditTierForEntity({ creditsAmount, creditsTierId, creditsTierName, extraCreditsAmount, price, recurringTimePeriod, entityId, }: IAddCreditTierForEntity, options?: IPostRequestOptions): Promise<IAddCreditTierForEntityResponse>;
    updateCreditTierForEntity({ creditsTierId, creditsAmount, creditsTierName, extraCreditsAmount, price, recurringTimePeriod, entityId, }: IUpdateCreditTierForEntity, options?: IPostRequestOptions): Promise<IUpdateCreditTierForEntityResponse>;
    getCreditTiersForEntity({ entityId }?: IGetCreditTiersForEntity, options?: IGetRequestOptions): Promise<IGetCreditTiersForEntityResponse>;
    getCreditInfoForUser({ entityId, forUserId }?: IGetCreditInfoForUser, options?: IGetRequestOptions): Promise<IGetCreditInfoForUserResponse>;
    getCreditInfoForEntity({ entityId }?: IGetCreditInfoForEntity, options?: IGetRequestOptions): Promise<IGetCreditInfoForEntityResponse>;
    buyCreditsForUser({ creditsTierId, intentId, forUserId, entityId }: IBuyCreditsForUser, options?: IPostRequestOptions): Promise<IBuyCreditsForUserResponse>;
    buyCreditsForEntity({ creditsTierId, intentId, entityId }: IBuyCreditsForEntity, options?: IPostRequestOptions): Promise<IBuyCreditsForEntityResponse>;
    decrementCreditsForUser({ entityId, creditsAmount, forUserId }: IDecrementCreditsForUser, options?: IPostRequestOptions): Promise<IDecrementCreditsForUserResponse>;
    decrementCreditsForEntity({ creditsAmount, entityId }: IDecrementCreditsForEntity, options?: IPostRequestOptions): Promise<IDecrementCreditsForEntityResponse>;
    createPaymentIntentForEntity({ cardData, intentData, entityId }: ICreatePaymentIntentForEntity, options?: IPostRequestOptions): Promise<IICreatePaymentIntentForEntityResponse>;
    approvePaymentForEntity({ entityId, intentId }: IApprovePaymentForEntity, options?: IPostRequestOptions): Promise<IApprovePaymentForEntityResponse>;
}
