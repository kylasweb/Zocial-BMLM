import QuestSdk from "../..";
import { IGetRequestOptions, IPostRequestOptions } from "../../types/common.types";
import { ICreateEvent, ICreateEventResponse, IDeleteEvent, IDeleteEventResponse, IUpdateEvent, IUpdateEventResponse, IGetAllEventsByEntityId, IGetAllEventsByEntityIdResponse, IGetAllEventsAndSourceByEntityId, IGetAllEventsAndSourceByEntityIdResponse, IGetEventDetails, IGetEventDetailsResponse, IGetEventSourceDetails, IGetEventSourceDetailsResponse, IIncrementEventCounter, IIncrementEventCounterResponse } from "../../types/event.types";
export declare class Event {
    questSdk: QuestSdk;
    constructor(questSdk: QuestSdk);
    createEvent({ source, eventName, entityId, description, metadata }: ICreateEvent, options?: IPostRequestOptions): Promise<ICreateEventResponse>;
    deleteEvent({ entityId, eventId, source }: IDeleteEvent, options?: IPostRequestOptions): Promise<IDeleteEventResponse>;
    updateEvent({ entityId, source, eventId, eventName, description, metadata }: IUpdateEvent, options?: IPostRequestOptions): Promise<IUpdateEventResponse>;
    getAllEventsByEntityId({ entityId }?: IGetAllEventsByEntityId, options?: IGetRequestOptions): Promise<IGetAllEventsByEntityIdResponse>;
    getEventDetails({ entityId, eventId }: IGetEventDetails, options?: IGetRequestOptions): Promise<IGetEventDetailsResponse>;
    getAllEventsAndSourceByEntityId({ entityId }?: IGetAllEventsAndSourceByEntityId, options?: IGetRequestOptions): Promise<IGetAllEventsAndSourceByEntityIdResponse>;
    getEventSourceDetails({ entityId, eventId, source }: IGetEventSourceDetails, options?: IGetRequestOptions): Promise<IGetEventSourceDetailsResponse>;
    incrementEventCount({ entityId, eventName, source, properties, }: IIncrementEventCounter, options?: IPostRequestOptions): Promise<IIncrementEventCounterResponse>;
}
