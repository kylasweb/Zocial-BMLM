var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useImperativeHandle, useMemo, useRef } from 'react';
import TourNavigator from 'tour-navigator';
var MultiRouteTour = forwardRef(function (_a, ref) {
    var _b = _a.id, id = _b === void 0 ? TourNavigator.defaultProps.id : _b, steps = _a.steps, _c = _a.startAt, startAt = _c === void 0 ? TourNavigator.defaultProps.startAt || 0 : _c, _d = _a.nextStepCount, nextStepCount = _d === void 0 ? 0 : _d, nextStepRoute = _a.nextStepRoute, number = _a.number, state = _a.state, onNavigate = _a.onNavigate, props = __rest(_a, ["id", "steps", "startAt", "nextStepCount", "nextStepRoute", "number", "state", "onNavigate"]);
    var tourRef = useRef(null);
    var pathname = window.location.pathname;
    var search = window.location.search;
    var __multiRouteTour = state || [];
    var lastState = __multiRouteTour[__multiRouteTour.length - 1];
    var currentStateIndex = number == undefined ? (__multiRouteTour.length - ((lastState === null || lastState === void 0 ? void 0 : lastState.id) == id ? 1 : 0)) : number - 1;
    var previousStateIndex = currentStateIndex - 1;
    var previousState = __multiRouteTour === null || __multiRouteTour === void 0 ? void 0 : __multiRouteTour[previousStateIndex];
    var currentState = __multiRouteTour === null || __multiRouteTour === void 0 ? void 0 : __multiRouteTour[currentStateIndex];
    if ((currentState === null || currentState === void 0 ? void 0 : currentState.id) != id) {
        currentState = {
            id: id,
            focusAt: (((previousState === null || previousState === void 0 ? void 0 : previousState.previousStepCount) + (previousState === null || previousState === void 0 ? void 0 : previousState.stepCount)) || 0) + startAt,
            stepRoute: pathname + search,
            stepCount: steps.length,
            previousStepCount: ((previousState === null || previousState === void 0 ? void 0 : previousState.previousStepCount) + (previousState === null || previousState === void 0 ? void 0 : previousState.stepCount)) || 0,
            previousStepRoute: (previousState === null || previousState === void 0 ? void 0 : previousState.stepRoute) || null,
        };
    }
    var modifiedSteps = useMemo(function () {
        return __spreadArray(__spreadArray(__spreadArray([], Array(currentState.previousStepCount).fill(steps[0]), true), steps, true), Array(nextStepCount).fill(steps[steps.length - 1]), true);
    }, [steps]);
    var handleNext = function (helperProps) {
        var _a;
        var lastStepForThisRoute = currentState.previousStepCount + currentState.stepCount;
        var isLast = helperProps.currentStepIndex == lastStepForThisRoute;
        if (nextStepRoute && isLast) {
            var newState = __spreadArray([], __multiRouteTour, true);
            if ((lastState === null || lastState === void 0 ? void 0 : lastState.id) != id)
                newState.push(currentState);
            onNavigate === null || onNavigate === void 0 ? void 0 : onNavigate(nextStepRoute, newState);
        }
        else {
            currentState.focusAt = helperProps.currentStepIndex;
            (_a = props.onNext) === null || _a === void 0 ? void 0 : _a.call(props, helperProps);
        }
    };
    var handlePrev = function (helperProps) {
        var _a;
        var isFirst = helperProps.currentStepIndex == (currentState.previousStepCount - 1);
        if (previousState && isFirst) {
            onNavigate === null || onNavigate === void 0 ? void 0 : onNavigate(currentState.previousStepRoute, __multiRouteTour.filter(function (item) { return item.id != id; }));
        }
        else {
            currentState.focusAt = helperProps.currentStepIndex;
            (_a = props.onPrev) === null || _a === void 0 ? void 0 : _a.call(props, helperProps);
        }
    };
    useImperativeHandle(ref, function () { return ({
        get id() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.props.id) !== null && _b !== void 0 ? _b : '';
        },
        get currentStep() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.currentStep) !== null && _b !== void 0 ? _b : null;
        },
        get target() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.currentElement) !== null && _b !== void 0 ? _b : null;
        },
        get currentStepIndex() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.currentStepIndex) !== null && _b !== void 0 ? _b : 0;
        },
        get previousStepIndex() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.state.previousStepIndex) !== null && _b !== void 0 ? _b : -1;
        },
        get steps() {
            var _a, _b, _c;
            return (_c = (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.props.steps) !== null && _b !== void 0 ? _b : TourNavigator.defaultProps.steps) !== null && _c !== void 0 ? _c : null;
        },
        get isScrollingIntoView() {
            var _a, _b;
            return (_b = (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.state.isScrollingIntoView) !== null && _b !== void 0 ? _b : false;
        },
        focus: function (scrollBehavior) {
            var _a;
            if (scrollBehavior === void 0) { scrollBehavior = 'auto'; }
            return (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.focus(scrollBehavior);
        },
        goto: function (stepIndex) { var _a; return (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.goto(stepIndex); },
        next: function () { var _a; return (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.next(); },
        prev: function () { var _a; return (_a = tourRef.current) === null || _a === void 0 ? void 0 : _a.prev(); },
        onRequestClose: function (params) { var _a, _b, _c; return (_c = (_a = tourRef.current) === null || _a === void 0 ? void 0 : (_b = _a.props).onRequestClose) === null || _c === void 0 ? void 0 : _c.call(_b, params); }
    }); }, [tourRef]);
    if (currentStateIndex != 0 && !previousState)
        return null;
    return (_jsx(TourNavigator, __assign({}, props, { id: id, steps: modifiedSteps, startAt: currentState.focusAt, onNext: handleNext, onPrev: handlePrev, ref: tourRef })));
});
export default MultiRouteTour;
